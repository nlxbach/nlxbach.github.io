[["index.html", "Phân tích dữ liệu sinh thái học cơ bản với R Giới thiệu", " Phân tích dữ liệu sinh thái học cơ bản với R Nguyễn Lê Xuân Bách 2024-09-02 Giới thiệu Tài liệu này giới thiệu một số phân tích cơ bản trong lĩnh vực sinh thái học với phần mềm R. Gồm các nội dung sau đây: Một số thao tác cơ bản đối với dữ liệu đa dạng sinh học Tra cứu cấp độ quý hiếm của loài trên IUCN Xử lý danh pháp loài Thao tác cơ bản với tập tin bản đồ Tạo sơ đồ độ giàu loài ở khu vực khảo sát Tải ghi nhận loài từ cơ sở dữ liệu GBIF Xây dựng mô hình phân bố loài với MaxEnt Tính chỉ số đa dạng sinh học và loài quan trọng trong ô định vị Các nội dung trong tài liệu hướng đến các bạn đang thực hiện hoặc muốn tìm hiểu về các phân tích dữ liệu trong lĩnh vực sinh thái học, đa dạng sinh học và đã biết cơ bản về phần mềm R. Do mình lười viết nên các nội dung khá ngắn ngọn, chủ yếu giới thiệu đến hàm và gói lệnh hỗ trợ cho việc phân tích. Các bạn cần chủ động tìm hiểu thêm các tham số và cách sử dụng chi tiết tại phần giới thiệu của các hàm và gói lệnh cũng như tìm hiểu thêm các tài liệu khác. Dữ liệu sử dụng thực hành trong tài liệu được chia sẻ tại đây. Tài liệu này hiện được chia sẻ miễn phí, nếu bạn nào có góp ý trao đổi về tài liệu cũng như liên quan đến khía cạnh sử dụng R trong sinh thái học xin vui lòng gởi về mình qua địa chỉ email: nlxbach@gmail.com. Ngoài ra nếu bạn nào cảm thấy tài liệu này hữu ích hoặc hỗ trợ được phần nào trong công việc hiện tại thì có thể mời mình ly cà phê trực tiếp hoặc gián tiếp tại đây nhé: Xin chân thành cảm ơn! Bách NGUYỄN "],["một-số-thao-tác-cơ-bản-đối-với-dữ-liệu-đa-dạng-sinh-học.html", "Phần 1 Một số thao tác cơ bản đối với dữ liệu đa dạng sinh học 1.1 Dữ liệu 1.2 Đọc dữ liệu 1.3 Thao tác cơ bản trên dữ liệu 1.4 Thống kê số lượng 1.5 Biểu đồ", " Phần 1 Một số thao tác cơ bản đối với dữ liệu đa dạng sinh học Ở nội dung này, chúng ta sẽ sử dụng thêm gói tidyverse bên cạnh các lệnh sẵn có trong R. Tidyverse là một bộ công cụ gồm nhiều gói lệnh khác nhau nhằm mục đích xử lý dữ liệu một cách dễ dàng và nhất quán. Các bạn có thể tìm hiểu thêm bộ công cụ này tại https://www.tidyverse.org/. library(tidyverse) 1.1 Dữ liệu Thực hành với bộ dữ liệu về thông tin Đa dạng Sinh học tại Bán đảo Sơn Trà được Trần Văn Bằng &amp; nnk. công bố năm 2019. Thông tin chi tiết về dữ liệu được trình bày tại tài liệu: Tran BV, Le D, Hoang HQ, Hoang DM (2019) Occurrence data of terrestrial vertebrates of Son Tra Peninsula, Da Nang City, Vietnam. Biodiversity Data Journal 7: e39233. https://doi.org/10.3897/BDJ.7.e39233 1.2 Đọc dữ liệu Sử dụng lệnh read.csv() để mở tập tin “*.csv” đã tải từ nguồn tài liệu và lưu với tên “sontra” sontra &lt;- read_csv(&quot;DATA/occurrence_SonTra_Peninsula.csv&quot;) 1.3 Thao tác cơ bản trên dữ liệu 1.3.1 Xem số lượng dòng và cột Đếm số lượng dòng và cột của bộ dữ liệu với lệnh dim(). Kết quả cho biết dữ liệu hiện có 900 hàng và 34 cột. Có thể sử dụng nrow() cho việc đếm riêng số lượng dòng, và ncol() để đếm riêng số lượng cột. dim(sontra) ## [1] 900 34 nrow(sontra) ## [1] 900 ncol(sontra) ## [1] 34 Xem danh sách tên trường thông tin của bảng với lệnh colnames() colnames(sontra) ## [1] &quot;occurrenceID&quot; &quot;basisOfRecord&quot; ## [3] &quot;eventDate&quot; &quot;year&quot; ## [5] &quot;month&quot; &quot;day&quot; ## [7] &quot;verbatimEventDate&quot; &quot;scientificName&quot; ## [9] &quot;kingdom&quot; &quot;phylum&quot; ## [11] &quot;class&quot; &quot;order&quot; ## [13] &quot;family&quot; &quot;genus&quot; ## [15] &quot;specificEpithet&quot; &quot;taxonRank&quot; ## [17] &quot;scientificNameAuthorship&quot; &quot;identifiedBy&quot; ## [19] &quot;dateIdentified&quot; &quot;decimalLatitude&quot; ## [21] &quot;decimalLongitude&quot; &quot;geodeticDatum&quot; ## [23] &quot;verbatimCoordinateSystem&quot; &quot;continent&quot; ## [25] &quot;country&quot; &quot;countryCode&quot; ## [27] &quot;stateProvince&quot; &quot;county&quot; ## [29] &quot;locality&quot; &quot;language&quot; ## [31] &quot;institutionCode&quot; &quot;collectionCode&quot; ## [33] &quot;individualCount&quot; &quot;preparations&quot; 1.3.2 Lọc dữ liệu theo cột Bảng dữ liệu này chứa nhiều trường thông tin mà chúng ta chưa cần sử dụng. Chúng ta có thể tạo một bảng mới chỉ chứa một số cột quan tâm với lệnh select() và lưu với tên “sontra2” như sau: sontra2 &lt;- sontra |&gt; select(class, family, genus, specificEpithet,eventDate,year) # xem 5 dòng đầu tiên trong bảng sontra2 |&gt; head(5) Bên cạnh việc chọn theo tên trường cụ thể, chúng ta có thể chọn theo một số cách sau: Chọn từ cột “class” đến cột “genus” sontra |&gt; select(class:genus) |&gt; head(5) Chọn từ cột thứ 11 đến cột thứ 14 sontra |&gt; select(11:14) |&gt; head(5) Chọn 6 cột đầu tiên nhưng trừ cột “eventDate” sontra |&gt; select(1:6) |&gt; select(-eventDate) |&gt; head(5) Chọn tất cả các cột bắt đầu bởi ký tự nào đó sontra |&gt; select(starts_with(&quot;c&quot;)) |&gt; head(5) Chọn tất cả các cột có chứa ký tự nào đó sontra |&gt; select(contains(&quot;Code&quot;)) |&gt; head(5) 1.3.3 Trích lọc theo dòng trong bảng. Để trích lọc thông tin theo dòng trong bảng ta sử dụng lệnh filter() kết hợp với các ký hiệu điều kiện như sau: x &lt; y: nhỏ hơn x &gt; y: lớn hơn x == y: bằng hoặc giống x &lt;= y: nhỏ hơn hoặc bằng y &gt;= y: lớn hơn hoặc bằng x != y: khác x %in% y: là một phần tử trong is.na(x): là NA !is.na(x): không là NA Ví dụ: Ta cần lọc ra các dòng ghi nhận của các loài thuộc Họ Tắc kè (Gekkonidae) dựa trên cột “family” của bảng. sontra2 |&gt; filter(family == &quot;Gekkonidae&quot;) Ví dụ: Lọc ra các ghi nhận của cả hai họ “Colubridae” và “Elapidae”. Ta kết hợp thêm lệnh %in% trong hàm filter() như sau: sontra2 |&gt; filter(family %in% c(&quot;Colubridae&quot;, &quot;Elapidae&quot;)) Kết quả ta có 20 dòng chứa thông tin về hai họ “Colubridae” và “Elapidae” trong bộ dữ liệu. Ta cũng có thể sử dụng ký hiệu &amp; (và), | (hoặc) để đưa thêm vào các điều kiện lọc khác. Ví dụ lọc ra các dòng của hai họ “Colubridae” và “Elapidae” được ghi nhận trong năm 2016: sontra2 |&gt; filter(family %in% c(&quot;Colubridae&quot;, &quot;Elapidae&quot;) &amp; year == 2016) 1.3.4 Sắp xếp dữ liệu Sử dụng lệnh arrange() để sắp xếp dữ liệu dựa trên các cột quan tâm. Khi đó các dòng sẽ được sắp theo trật tự bảng chữ cái đối với chữ và từ nhỏ đến lớn đối với số. Ví dụ: Sắp bảng theo trật tự bảng chữ cái các Chi ở cột “genus”: sontra2 |&gt; filter(family %in% c(&quot;Colubridae&quot;, &quot;Elapidae&quot;) &amp; year == 2016) |&gt; arrange(genus) Nếu muốn đảo chiều, kết hợp thêm lệnh desc() trong lệnh arrange() như sau: sontra2 |&gt; filter(family %in% c(&quot;Colubridae&quot;, &quot;Elapidae&quot;) &amp; year == 2016) |&gt; arrange(desc(genus)) 1.4 Thống kê số lượng 1.4.1 Cách 1 với các lệnh từ gói Tidyverse Để đếm số lượng ghi nhận, số lượng họ, chi và loài trong bộ dữ liệu ta có thể sử dụng lệnh summarise() với cú pháp như sau: lệnh n() để đếm tổng số dòng, còn n_distinct() để đếm số dòng có giá trị khác nhau trong một cột nào đó. sontra |&gt; summarise( tong_so_ho = n_distinct(family), tong_so_chi = n_distinct(genus), tong_so_loai = n_distinct(scientificName), tong_so_ghi_nhan = n() ) ## # A tibble: 1 × 4 ## tong_so_ho tong_so_chi tong_so_loai tong_so_ghi_nhan ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 63 121 144 900 Kết quả cho thấy trong bộ dữ liệu có tổng cộng 900 ghi nhận của 144 loài, 121 chi và 63 họ. Để thống kê số lượng tương tự nhưng riêng cho từng nhóm Thú, Lưỡng cư, Bò sát và Chim thì kết hợp thêm lệnh group_by() như sau: sontra |&gt; group_by(class) |&gt; summarise(tong_so_ho = n_distinct(family), tong_so_chi = n_distinct(genus), tong_so_loai = n_distinct(scientificName), tong_so_ghi_nhan = n()) ## # A tibble: 4 × 5 ## class tong_so_ho tong_so_chi tong_so_loai tong_so_ghi_nhan ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Amphibia 6 13 16 182 ## 2 Aves 35 67 82 445 ## 3 Mammal 13 18 19 128 ## 4 Reptilia 9 23 27 145 Số lượng ghi nhận, loài chi họ đã được đếm theo từng nhóm sinh vật. Bên cạnh đó, có thể sử dụng lệnh count() để đếm số ghi nhận theo nhóm động vật như sau: sontra |&gt; count(class) ## # A tibble: 4 × 2 ## class n ## &lt;chr&gt; &lt;int&gt; ## 1 Amphibia 182 ## 2 Aves 445 ## 3 Mammal 128 ## 4 Reptilia 145 Hoặc kết hợp hàm arrange() và top_n() để tìm 5 loài có số ghi nhận nhiều nhất sontra |&gt; count(scientificName) |&gt; arrange(desc(n)) |&gt; top_n(n = 5) ## # A tibble: 5 × 2 ## scientificName n ## &lt;chr&gt; &lt;int&gt; ## 1 Fejervarya limnocharis (Gravenhorst, 1829) 75 ## 2 Pygathrix nemaeus (Linnaeus, 1771) 35 ## 3 Limnonectes poilani (Bourret, 1942) 29 ## 4 Cyrtodactylus pseudoquadrivirgatus Rösler, Nguyen, Vu, Ngo &amp; Ziegler, 2… 28 ## 5 Physignathus cocincinus Cuvier, 1829 22 Kết quả loài Fejervarya limnocharis (Gravenhorst, 1829) được ghi nhận nhiều nhất, lên đến 75 lần. 1.4.2 Cách 2 sử dụng gói lệnh bdvis library(bdvis) Để sử dụng các lệnh từ gói bdvis, ta cần phải đổi tên một số cột quan trọng của bảng sontra liên quan đến tên khoa học, thời gian và tọa độ ghi nhận đồng thời chuyển định dạng sang định dạng bảng của gói này với lệnh format_bdvis(). sontra_bdvis &lt;- sontra |&gt; rename( &quot;Latitude&quot; = &quot;decimalLatitude&quot;, &quot;Longitude&quot; = &quot;decimalLongitude&quot;, &quot;Scientific_name&quot; = &quot;scientificName&quot;, &quot;Family&quot; = &quot;family&quot;, &quot;Genus&quot; = &quot;genus&quot;) |&gt; mutate(Date_collected=paste(year,month,day,sep = &quot;-&quot;)) |&gt; format_bdvis() Khi đó sử dụng lệnh bdsummary()để thống kê số lượng. Kết quả sẽ trả về số ghi nhận, số lượng Họ, Chi, Loài, thời gian ghi nhận trong bộ dữ liệu. bdsummary(sontra_bdvis) ## ## Total no of records = 900 ## ## Temporal coverage... ## Date range of the records from 2016-01-10 to 2017-10-24 ## ## Taxonomic coverage... ## No of Families : 63 ## No of Genus : 121 ## No of Species : 144 ## ## Spatial coverage ... ## Bounding box of records 16.098 , 108.2236 - 16.1535 , 108.3361 ## Degree celles covered : 1 ## % degree cells covered : Inf Ta cũng có thể xem thông tin cho các ghi nhận về nhóm Thú như sau: sontra_bdvis |&gt; filter(class == &quot;Mammal&quot;) |&gt; bdsummary() ## ## Total no of records = 128 ## ## Temporal coverage... ## Date range of the records from 2016-05-28 to 2017-10-24 ## ## Taxonomic coverage... ## No of Families : 13 ## No of Genus : 18 ## No of Species : 19 ## ## Spatial coverage ... ## Bounding box of records 16.099 , 108.2236 - 16.152 , 108.3361 ## Degree celles covered : 1 ## % degree cells covered : Inf 1.5 Biểu đồ 1.5.1 Vẽ nhanh một số biểu đồ với gói bdvis 1.5.1.1 Số lượng ghi nhận theo ngày, tuần, tháng trong năm par(mfrow = c(1,3)) tempolar(sontra_bdvis, color=&quot;red&quot;, title=&quot;Ghi nhận theo ngày&quot;, plottype=&quot;r&quot;, timescale=&quot;d&quot;) tempolar(sontra_bdvis, color=&quot;red&quot;, title=&quot;Ghi nhận theo tuần&quot;, plottype=&quot;r&quot;, timescale=&quot;w&quot;) tempolar(sontra_bdvis, color=&quot;red&quot;, title=&quot;Ghi nhận theo tháng&quot;, plottype=&quot;r&quot;, timescale=&quot;m&quot;) 1.5.1.2 Calendarheat - Số lượng ghi nhận theo ngày Biểu đồ thể hiện số lượng ghi nhận theo ngày. Trong đó mỗi ô vuông là một ngày, màu sắc của ô thể hiện số lượng ghi nhận từ ít đến nhiều theo gam màu từ đỏ đến xanh lá. bdcalendarheat(sontra_bdvis) 1.5.1.3 Chronohorogram - Số lượng ghi nhận theo tháng và năm Biểu đồ này thể hiện số lượng ghi nhận theo tháng và năm. Ta có thể quy định năm bắt đầu và năm kết thúc sự theo dõi. Khi đó tâm đồ thị thể hiện cho năm bắt đầu, sau đó mỗi năm tiếp theo được thể hiện bởi 1 vòng tròn. Một điểm thể hiện cho một ngày ghi nhận dữ liệu. Màu sắc mặc định được thể hiện số ghi nhận trong ngày từ ít đến nhiều bằng gam màu từ xanh dương đến đỏ. chronohorogram(sontra_bdvis, startyear = 2015, endyear = 2020, ptsize = 1.5, title = &quot;2015-2020&quot;) 1.5.1.4 Số lượng ghi nhận theo họ với treemap Kích thước của từng ô tương ứng với số lượng ghi nhận. Màu sắc của ô thể hiện số lượng Chi của Họ. Ví dụ vẽ nhanh số lượng ghi nhận theo các Họ cho nhóm Chim sontra_bdvis |&gt; filter(class == &quot;Aves&quot;) |&gt; taxotree() 1.5.2 Số lượng ghi nhận với gói lệnh GGPLOT2 Đếm số lượng theo từng nhóm df_soluong &lt;- sontra |&gt; group_by(class) |&gt; summarise(Ho = n_distinct(family), Chi = n_distinct(genus), Loai = n_distinct(scientificName), Ghi_nhan = n()) Chuyển đổi bảng sang định dạng tidy, đây là cấu trúc dữ liệu được xem là cấu trúc gọn gàng dễ thao tác, thực hiện các phân tích mô hình hóa và trực quan hóa. Kiểu dữ liệu này có cấu trúc: mỗi biến là một cột, mỗi quan sát là một hàng và mỗi loại đơn vị quan sát là một bảng. Xem thêm thông tin về định dạng tidy tại đây: https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html df_soluong &lt;- df_soluong |&gt; tidyr::pivot_longer(-class, names_to = &quot;rank&quot;, values_to = &quot;n&quot;) |&gt; mutate(rank = factor(rank, levels = c(&quot;Ho&quot;,&quot;Chi&quot;,&quot;Loai&quot;,&quot;Ghi_nhan&quot;), labels = c(&quot;Họ&quot;,&quot;Chi&quot;,&quot;Loài&quot;,&quot;Ghi nhận&quot;))) Tiến hành vẽ biểu đồ thể hiện số lượng về ghi nhận, họ, chi và loài cho từng nhóm sinh vật ggplot(df_soluong, aes(x = class, y = n, fill = rank)) + geom_col(position = position_dodge()) + geom_text(aes(x = class, y = n, label = n ), position = position_dodge(width = 0.9), vjust = -0.5) + scale_fill_viridis_d() + theme_bw() + labs(title = &quot;Số lượng ghi nhận, Họ, Chi và Loài tại Sơn Trà&quot;, subtitle = &quot;Năm 2019&quot;, x = &quot;Nhóm&quot;, y = &quot;Số lượng&quot;, caption = &quot;Nguồn dữ liệu : Trần Văn Bằng &amp; nnk., 2019&quot;) 1.5.3 Biểu đồ treemap thể hiện số lượng ghi nhận theo họ. Chúng ta có thể sử dụng lệnh geom_treemap() từ gói treemapify kết hợp với gói ggplot2 để vẽ biểu đồ treemap. # Gọi gói lệnh library(treemapify) # Đếm số lượng ghi nhận theo họ spByFam &lt;- sontra |&gt; count(family) # Vẽ biểu đồ ggplot(spByFam, aes(area = n, fill = n, label = paste(family, n, sep = &quot;\\n&quot;))) + geom_treemap(start = &quot;bottomleft&quot;) + geom_treemap_text(place = &quot;centre&quot;) + scale_fill_distiller(palette = &quot;Greens&quot;, direction = 1) + labs(fill = &quot;Số ghi nhận&quot;) ggplot2 là gói lệnh rất mạnh cho việc hình ảnh hoá dữ liệu với nhiều kiểu biểu đồ khác nhau. thông tin và hướng dẫn sử dụng có thể xem tại https://ggplot2.tidyverse.org/. Từ cấu trúc gói lệnh này, nhiều tác giả khác nhau đã phát triển thêm nhiều gói lệnh phục vụ cho những kiểu biểu đồ chuyên biệt, có thể xem thêm tại đây: https://exts.ggplot2.tidyverse.org/gallery/ "],["tra-cứu-cấp-độ-quý-hiếm-của-loài-theo-iucn.html", "Phần 2 Tra cứu cấp độ quý hiếm của loài theo IUCN 2.1 Xin cấp và khai báo mã cá nhân từ IUCN 2.2 Sử dụng gói rredlist 2.3 Sử dụng gói taxize 2.4 Tính chỉ số Red List Index", " Phần 2 Tra cứu cấp độ quý hiếm của loài theo IUCN 2.1 Xin cấp và khai báo mã cá nhân từ IUCN Để có thể tra cứu tự động trên dữ liệu IUCN, ta cần mã token được cấp tại địa chỉ https://apiv3.iucnredlist.org/api/v3/token. Mã này được cấp riêng cho từng cá nhân. Tuy nhiên vào thời điểm biên soạn tài liệu này, hệ thống cấp mã API của IUCN đang bị lỗi và tạm ngưng hoạt động. Chúng ta có thể sử dụng mã token tạm là “9bb4facb6d23f48efbf424bb05c0c1ef1cf6f468393bc745d42179ac4aca5fee” Khai báo trong R với hai cách như sau: Cách 1: chèn mã vào option trước khi chạy các lệnh tra cứu. options(iucn_redlist_key=&quot;9bb4facb6d23f48efbf424bb05c0c1ef1cf6f468393bc745d42179ac4aca5fee&quot;) Cách 2: chèn dòng lệnh với cấu trúc IUCN_REDLIST_KEY=\"IUCN_TOKEN\" vào tập tin có tên .Renviron. Sử dụng dòng lệnh usethis::edit_r_environ() trong R để mở tập tin này lên. Có nhiều gói lệnh hỗ trợ tra cứu tình trạng nguy cấp của loài. Tài liệu này trình bày cách sử dụng với 2 gói lệnh rredlist và taxsize. 2.2 Sử dụng gói rredlist library(rredlist) Tra cứu với lệnh rl_search(). Kết quả trả về là một list gồm 2 phần tử : * name: chứa tên loài tra cứu * result: bảng gồm 30 trường thông tin liên quan đến loài 2.2.1 Tra cứu cho 1 loài iucn_res &lt;- rl_search(&quot;Afzelia xylocarpa&quot;) # Xem tên các trường thông tin colnames(iucn_res$result) ## [1] &quot;taxonid&quot; &quot;scientific_name&quot; &quot;kingdom&quot; ## [4] &quot;phylum&quot; &quot;class&quot; &quot;order&quot; ## [7] &quot;family&quot; &quot;genus&quot; &quot;main_common_name&quot; ## [10] &quot;authority&quot; &quot;published_year&quot; &quot;assessment_date&quot; ## [13] &quot;category&quot; &quot;criteria&quot; &quot;population_trend&quot; ## [16] &quot;marine_system&quot; &quot;freshwater_system&quot; &quot;terrestrial_system&quot; ## [19] &quot;assessor&quot; &quot;reviewer&quot; &quot;aoo_km2&quot; ## [22] &quot;eoo_km2&quot; &quot;elevation_upper&quot; &quot;elevation_lower&quot; ## [25] &quot;depth_upper&quot; &quot;depth_lower&quot; &quot;errata_flag&quot; ## [28] &quot;errata_reason&quot; &quot;amended_flag&quot; &quot;amended_reason&quot; Trường category trình bày thông tin về tình trạng nguy cấp của loài. iucn_res$result$category ## [1] &quot;EN&quot; Xem thêm một số thông tin khác iucn_res$result %&gt;% select(scientific_name, category, criteria, published_year) ## scientific_name category criteria published_year ## 1 Afzelia xylocarpa EN A1cd 1998 2.2.2 Tra cứu cho nhiều loài Hàm rl_search() chỉ áp dụng để tra cứu một loài, để tra cứu nhiều loài cần đặt lệnh tra cứu trong vòng lặp. Ví dụ: mysp &lt;- c(&quot;Afzelia xylocarpa&quot;,&quot;Xylopia pierrei&quot;,&quot;Dipterocarpus dyeri&quot;) res &lt;- lapply(mysp, rl_search) Xem nhanh kết quả sapply(res, function(x) paste(x$name,&quot;-&quot;, x$result$category)) ## [1] &quot;Afzelia xylocarpa - EN&quot; &quot;Xylopia pierrei - NT&quot; ## [3] &quot;Dipterocarpus dyeri - EN&quot; 2.2.3 Xem quốc gia có sự phân bố của loài: Ngoài việc tra cứu tình trạng nguy cấp, gói lệnh này còn hỗ trợ tra cứu danh sách các quốc gia có sự phân bố của loài thông qua lệnh rl_occ_country(). Ví dụ: Tra cứu các quốc gia có sự phân bố loài Gõ đỏ (Afzelia xylocarpa) rl_occ_country(&#39;Afzelia xylocarpa&#39;) ## $name ## [1] &quot;Afzelia xylocarpa&quot; ## ## $count ## [1] 5 ## ## $result ## code country presence origin distribution_code ## 1 KH Cambodia Extant Native Native ## 2 LA Lao People&#39;s Democratic Republic Extant Native Native ## 3 MM Myanmar Extant Native Native ## 4 TH Thailand Extant Native Native ## 5 VN Viet Nam Extant Native Native 2.3 Sử dụng gói taxize Gọi gói lệnh và sử dụng lệnh iucn_summary() để tra cứu thông tin trực tiếp trên trang web của IUCN. library(taxize) 2.3.1 Tra cứu cho 1 loài Ví dụ: Tra cứu cho loài Afzelia xylocarpa: iucn_res &lt;- iucn_summary(&quot;Afzelia xylocarpa&quot;) ## ══ 1 queries ═══════════════ ## ✔ Found: Afzelia xylocarpa ## ══ Results ═════════════════ ## ## • Total: 1 ## • Found: 1 ## • Not Found: 0 Kết quả trả về là định dạng list, trong đó cho mỗi loài là một phần tử. Mỗi phần tử lại là một list khác chứa 4 thông tin sau (nếu có): Tình trạng nguy cấp, lịch sử xếp hạng, vùng phân bố và xu hướng về việc thay đổi kích thước quần thể. Vì chúng ta chỉ tra cho 1 loài nên ta truy vấn trực tiếp vào phần tử đầu tiên của kết quả. names(iucn_res[[1]]) ## [1] &quot;status&quot; &quot;history&quot; &quot;distr&quot; &quot;trend&quot; # Tình trạng nguy cấp iucn_res[[1]]$status ## [1] &quot;EN&quot; # Lịch sử xếp hạng iucn_res[[1]]$history ## year assess_year code category ## 1 1998 1998 EN Endangered # Quốc gia phân bố của loài iucn_res[[1]]$distr ## [1] &quot;Cambodia&quot; &quot;Lao People&#39;s Democratic Republic&quot; ## [3] &quot;Myanmar&quot; &quot;Thailand&quot; ## [5] &quot;Viet Nam&quot; # Xu hướng về sự phân bố của loài iucn_res[[1]]$trend ## [1] NA 2.3.2 2.2.2 Tra cứu cho nhiều loài Hàm iucn_summary() có thể áp dụng tra cứu cho nhiều loài cùng lúc: iucn_res &lt;- iucn_summary(c(&quot;Afzelia xylocarpa&quot;,&quot;Xylopia pierrei&quot;,&quot;Dipterocarpus dyeri&quot;)) ## ══ 1 queries ═══════════════ ## ✔ Found: Afzelia xylocarpa ## ══ Results ═════════════════ ## ## • Total: 1 ## • Found: 1 ## • Not Found: 0 ## ══ 1 queries ═══════════════ ## ✔ Found: Xylopia pierrei ## ══ Results ═════════════════ ## ## • Total: 1 ## • Found: 1 ## • Not Found: 0 ## ══ 1 queries ═══════════════ ## ✔ Found: Dipterocarpus dyeri ## ══ Results ═════════════════ ## ## • Total: 1 ## • Found: 1 ## • Not Found: 0 Ta có thể xem nhanh trạng thái của cả 3 loài trên bằng lệnh iucn_status() iucn_status(iucn_res) ## Afzelia xylocarpa Xylopia pierrei Dipterocarpus dyeri ## &quot;EN&quot; &quot;NT&quot; &quot;EN&quot; 2.4 Tính chỉ số Red List Index Chỉ số RLI cho thấy xu hướng về nguy cơ tuyệt chủng chung của các loài và được sử dụng để theo dõi tiến độ thực hiện mục tiêu giảm thiểu mất đa dạng sinh học. RLI được tính bằng hiệu số của 1 cho tổng của tích số lượng loài ở từng hạng nguy cấp với trọng số của cấp tương ứng (0 for LC, 1 for NT, 2 for VU, 3 for EN, 4 for CR and 5 for EX), chia cho tích của tổng số lượng loài được đánh giá không tính cấp DD với trọng số của cấp EX (5) (Bubb et al. 2009). Công thức như sau: \\[ RLI_t = 1-\\frac{\\sum_{s}W_{c(t,s)}}{W_{EX} * N} \\] Chỉ số RLI có giá trị từ 0 đến 1, với giá trị 1 cho biết không có nguy cơ tuyệt chủng hiện tại đối với bất kỳ loài nào được đưa vào và giá trị 0 có nghĩa là tất cả các loài được đưa vào đều đã tuyệt chủng. Trong R, có thể sử dụng lệnh rli() từ gói lệnh red để tính chỉ số Red List Index từ danh lục của khu vực nghiên cứu. Ví dụ: Trong danh sách loài nghiên cứu, có 3 loài cấp CR, 2 loài cấp EN, 2 loài cấp VU, 1 loài cấp NT, 3 loài cấp LC và 1 loài cấp DD. Chỉ số RLI tính được là 0,58. library(red) danhsach &lt;- c(rep(&quot;CR&quot;,3), rep(&quot;EN&quot;,2), rep(&quot;VU&quot;,2), rep(&quot;NT&quot;,1), rep(&quot;LC&quot;,3), rep(&quot;DD&quot;,1)) danhsach ## [1] &quot;CR&quot; &quot;CR&quot; &quot;CR&quot; &quot;EN&quot; &quot;EN&quot; &quot;VU&quot; &quot;VU&quot; &quot;NT&quot; &quot;LC&quot; &quot;LC&quot; &quot;LC&quot; &quot;DD&quot; rli(danhsach) ## [1] 0.5818182 "],["xử-lý-danh-pháp.html", "Phần 3 Xử lý danh pháp 3.1 Tách phần tên khoa học và tên tác giả 3.2 Kiểm tra lỗi chính tả, tình trạng danh pháp", " Phần 3 Xử lý danh pháp Trong công tác kiểm kê số lượng loài trong một danh lục, thông thường chúng ta sẽ căn cứ vào trường thông tin chứa danh pháp khoa học của loài để xác định. Tuy nhiên đối với một danh sách dài, được tổng hợp từ nhiều nguồn thông tin, thường sẽ tồn tại các lỗi chính tả và danh pháp đồng danh ở cột danh pháp loài. Để kết quả kiểm đếm được chính xác, chúng ta cần phải thực hiện thao tác làm sạch dữ liệu về danh pháp trước như sau: 3.1 Tách phần tên khoa học và tên tác giả Sử dụng lệnh WFO.prepare() trong gói lệnh `WorldFlora` để tách phần tên tác giả và tên loài. library(WorldFlora) mysp &lt;- c(&quot;Afzelia javanica (Miq.) J.Leonard (**) (In review)&quot;, &quot;Sorbus aucuparia subsp. praemorsa (Guss.) Nyman&quot;) mysp.prepare &lt;- mysp %&gt;% WFO.prepare() %&gt;% select(spec.full, spec.name, Authorship) 3.2 Kiểm tra lỗi chính tả, tình trạng danh pháp 3.2.1 Nhóm Thực vật Đối với các loài thực vật, chúng ta có thể sử dụng một số gói lệnh như rWCVP hay WorldFlora để kiểm tra tình trạng danh pháp của loài về tính chính xác, lỗi chính tả hay sự đồng danh, … Gói lệnh rWCVP sẽ tra cứu từ bộ dữ liệu POWO (powo.science.kew.org), còn gói WorldFlora sẽ căn cứ từ bộ dữ liệu tại Plants of the World Online (www.worldfloraonline.org) 3.2.2 Ví dụ với gói lệnh rWCVP Chúng ta có danh sách gồm 4 danh pháp với các trường hợp sau: Afzelia xylocarpa : Danh pháp chính xác và hiện được chấp nhận Afzelia xylocarppa : Danh pháp sai lỗi chính tả (dư 1 ký tự p ở phần tên loài) Afzellia xylocarppa : Danh pháp sai lỗi chính tả (dư 1 ký tự l ở phần tên chi và 1 ký tự p ở phần tên loài) Afzelia cochinchinensis: Danh pháp đúng, nhưng hiện được xếp là đồng danh library(rWCVP) # danh sách danh pháp cần kiểm tra mysp &lt;- c(&quot;Afzelia xylocarpa&quot;,&quot;Afzelia xylocarppa&quot;,&quot;Afzellia xylocarppa&quot;,&quot;Afzelia cochinchinensis&quot;) # chuyển sang dạng data.frame mydf &lt;- data.frame(mysp) # kiểm tra danh pháp với tham số fuzzy cho việc dò lỗi chính tả matches &lt;- wcvp_match_names(mydf, name_col=&quot;mysp&quot;, fuzzy=TRUE, progress_bar=F) Kết quả trả về như bảng sau. Trong đó cột match_type cho thấy danh pháp thứ 1 và thứ 4 được tìm chính xác “Exact”, còn danh pháp thứ 2 và 3 được tìm thấy với dạng gần đúng “Fuzzy”. Bên cạnh đó thông tin tại cột wcvp_status cho thấy danh pháp thứ 4 hiện là đồng danh và cột wcvp_accepted_id sẽ cho biết mã danh pháp hiện được chấp nhận của danh pháp này. Trường hợp này chúng ta có mã danh pháp đúng là ‘2625015’. matches |&gt; dplyr::select(mysp,match_type,wcvp_id,wcvp_name,wcvp_authors,wcvp_status, wcvp_accepted_id)|&gt; b_show_df(output) Để biết danh pháp khoa học của mã ‘2625015’, chúng ta có thể tra cứu trong bộ dữ liệu wcvp_names. #remotes::install_github(&#39;matildabrown/rWCVPdata&#39;) library(rWCVPdata) wcvp_names |&gt; filter(plant_name_id==&#39;2625015&#39;) |&gt; t() ## [,1] ## plant_name_id &quot;2625015&quot; ## ipni_id &quot;473084-1&quot; ## taxon_rank &quot;Species&quot; ## taxon_status &quot;Accepted&quot; ## family &quot;Fabaceae&quot; ## genus_hybrid NA ## genus &quot;Afzelia&quot; ## species_hybrid NA ## species &quot;xylocarpa&quot; ## infraspecific_rank NA ## infraspecies NA ## parenthetical_author &quot;Kurz&quot; ## primary_author &quot;Craib&quot; ## publication_author NA ## place_of_publication &quot;Bull. Misc. Inform. Kew&quot; ## volume_and_page &quot; 1912: 267&quot; ## first_published &quot;(1912)&quot; ## nomenclatural_remarks NA ## geographic_area &quot;Indo-China&quot; ## lifeform_description &quot;tree&quot; ## climate_description &quot;wet tropical&quot; ## taxon_name &quot;Afzelia xylocarpa&quot; ## taxon_authors &quot;(Kurz) Craib&quot; ## accepted_plant_name_id &quot;2625015&quot; ## basionym_plant_name_id &quot;2531801&quot; ## replaced_synonym_author NA ## homotypic_synonym NA ## parent_plant_name_id &quot;2624953&quot; ## powo_id &quot;473084-1&quot; ## hybrid_formula NA ## reviewed &quot;Y&quot; 3.2.3 Danh pháp động vật Hiện tại có rất nhiều bộ dữ liệu khác nhau về danh pháp khoa học cho các loài động vật tuỳ thuộc nhóm nhỏ như Chim, Thú, Cá… Gói lệnh taxize sẽ hỗ trợ việc kiểm tra danh pháp từ nhiều bộ dữ liệu. library(taxize) Đầu tiên ta cần xác định mã ID của nguồn dữ liệu cần dùng để tra cứu trong danh sách các nguồn được hỗ trợ của gói lệnh. Sử dụng lệnh gnr_datasources() để xem danh sách các nguồn. Tùy nhóm đối tượng nghiên cứu chúng ta sẽ chọn nguồn dữ liệu thích hợp. Trong ví dụ này chúng ta sẽ chọn nguồn tham khảo là ‘Integrated Taxonomic Information SystemITIS’ # Lấy mã ID của bộ nguồn ITIS &lt;- gnr_datasources() %&gt;% filter(title == &#39;Integrated Taxonomic Information SystemITIS&#39;) %&gt;% .$id 3.2.3.1 Kiểm tra lỗi chính tả Chúng ta có một danh lục ví dụ gồm 5 loài, trong đó loài Sus scroffa bị sai lỗi chính tả ở chữ ‘f.’ Sử dụng lệnh gnr_resolve() để kiểm tra danh pháp với bộ dữ liệu ITIS. Sử dụng tham số canonical = TRUE sẽ trả về tên khoa học đúng và không chứa phần tên tác giả. Nếu chúng ta cần cả phần tên tác giả thì để giá trị là FALSE. mysp &lt;- c(&quot;Herpestes javanicus&quot;, &quot;Sus domesticus&quot;, &quot;Sus scroffa&quot;, &quot;Actitis hypoleucos&quot;,&quot;Tringa hypoleucos&quot;) mysp_checked &lt;- gnr_resolve(sci = mysp, data_source_ids = ITIS , canonical = TRUE) %&gt;% dplyr::select(submitted_name, matched_name2) mysp_checked ## # A tibble: 5 × 2 ## submitted_name matched_name2 ## &lt;chr&gt; &lt;chr&gt; ## 1 Herpestes javanicus Herpestes javanicus ## 2 Sus domesticus Sus domesticus ## 3 Sus scroffa Sus scrofa ## 4 Actitis hypoleucos Actitis hypoleucos ## 5 Tringa hypoleucos Tringa hypoleucos Kết quả cả 5 loài đều được tìm thấy trong dữ liệu tra cứu. Và loài Sus scroffa đã được sửa lỗi chính tả với tên đúng Sus scrofa 3.2.3.2 Kiểm tra sự đồng danh Ta sử dụng lệnh get_tsn() để lấy mã id của loài đã được kiểm tra ở bước trên (cột matched_name2) trong bộ dữ liệu. mysp_checked &lt;- mysp_checked |&gt; mutate(id = get_tsn(matched_name2) |&gt; as.character()) ## ══ 5 queries ═══════════════ ## ✔ Found: Herpestes javanicus ## ✔ Found: Sus domesticus ## ✔ Found: Sus scrofa ## ✔ Found: Actitis hypoleucos ## ✔ Found: Tringa hypoleucos ## ══ Results ═════════════════ ## ## • Total: 5 ## • Found: 5 ## • Not Found: 0 mysp_checked ## # A tibble: 5 × 3 ## submitted_name matched_name2 id ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Herpestes javanicus Herpestes javanicus 552467 ## 2 Sus domesticus Sus domesticus 898265 ## 3 Sus scroffa Sus scrofa 180722 ## 4 Actitis hypoleucos Actitis hypoleucos 176613 ## 5 Tringa hypoleucos Tringa hypoleucos 176625 Sau khi đã có mã id của danh pháp, ta có thể sử dụng lệnh id2name() để xem tình trạng danh pháp có hiệu lực hay không. check_status &lt;- id2name(mysp_checked$id, db = &quot;itis&quot;) do.call(rbind, check_status ) ## id name rank status parent_tsn ## 552467 552467 Herpestes javanicus Species invalid 0 ## 898265 898265 Sus domesticus Species invalid 0 ## 180722 180722 Sus scrofa Species valid 180721 ## 176613 176613 Actitis hypoleucos Species valid 176611 ## 176625 176625 Tringa hypoleucos Species invalid 0 Cột status cho thấy có 2 tên loài trong danh pháp không còn hiệu lực. Đây có thể là tên đồng danh. Chúng ta dùng lệnh itis_acceptname() để kiểm tra danh sách tên loài này có chứa tên đồng danh hay không dựa trên cột id. Nếu là tên đồng danh thì lệnh sẽ trả về tên được chấp nhận ở cột acceptedname. check_syn &lt;- itis_acceptname(searchtsn = mysp_checked$id) check_syn ## submittedtsn acceptedname acceptedtsn author ## 1 552467 Urva javanica 1229753 (É. Geoffroy Saint-Hilaire, 1818) ## 2 898265 Sus scrofa 180722 Linnaeus, 1758 ## 3 180722 &lt;NA&gt; 180722 &lt;NA&gt; ## 4 176613 &lt;NA&gt; 176613 &lt;NA&gt; ## 5 176625 Actitis hypoleucos 176613 (Linnaeus, 1758) Kết quả ta thấy có 3 tên đồng danh trong danh lục. Chúng ta có thể ghép kết quả này vào bảng mysp_checked bằng lệnh left_join() như sau mysp_checked &lt;- mysp_checked |&gt; left_join(check_syn, by = c(&quot;id&quot; = &quot;submittedtsn&quot;)) mysp_checked |&gt; b_show_df(output) 3.2.4 Xem thông tin về loài Cột acceptedtsn ở bảng trên chứa mã id của tất cả danh pháp được chấp nhận. Từ cột này chúng ta có thể lấy tất cả các thông tin khác của loài với lệnh itis_getrecord() Ví dụ lấy thông tin về loài Herpestes javanicus có mã id là 552467 itis_getrecord(552467) Vì kết quả của hàm này rất dài nên không thể hiện ở đây. Các bạn có thể thực hành và xem kết quả trên máy tính của mình. Chúng ta có thể viết một lệnh nhỏ chỉ để lấy phần tên loài và tên tác giả từ mã id như sau: itis_id2name_author &lt;- function(id){ df &lt;- itis_getrecord(id) %&gt;% lapply(function(x) x$scientificName) res &lt;- data.frame(tsn = sapply(df, function(x) x$tsn), combinedName = sapply(df, function(x) x$combinedName), author = sapply(df, function(x) x$author)) return(res) } mysp_checked$acceptedtsn |&gt; unique() |&gt; itis_id2name_author() ## tsn combinedName author ## 1229753 1229753 Urva javanica (É. Geoffroy Saint-Hilaire, 1818) ## 180722 180722 Sus scrofa Linnaeus, 1758 ## 176613 176613 Actitis hypoleucos (Linnaeus, 1758) 3.2.5 Tìm các cấp phân loại từ tên loài Sử dụng lệnh tax_name() để lấy thông tin các cấp phân loại liên quan đến loài. Nhập các cấp phân loại cần lấy thông tin vào tham số get =. Lệnh này sử dụng hai nguồn dữ liệu tra cứu là ITIS và NCBI. Thay đổi tham số db = itis hoặc ncbi hoặc both để chọn nguồn dữ liệu cần tra. mysp &lt;- c(&quot;Herpestes javanicus&quot;, &quot;Sus scrofa&quot;, &quot;Actitis hypoleucos&quot;) tax_name(mysp, db = &quot;itis&quot;, get = c(&quot;genus&quot;,&quot;family&quot;,&quot;order&quot;,&quot;class&quot;,&quot;kingdom&quot;), messages = F) ## db query genus family order class ## 1 itis Herpestes javanicus &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 itis Sus scrofa Sus Suidae Artiodactyla Mammalia ## 3 itis Actitis hypoleucos Actitis Scolopacidae Charadriiformes Aves ## kingdom ## 1 &lt;NA&gt; ## 2 Animalia ## 3 Animalia Danh sách các cấp phân loại trong dữ liệu gồm ## [1] &quot;domain, superkingdom, kingdom, subkingdom, infrakingdom,superphylum, phylum,division, subphylum,subdivision, infradivision, superclass, class, subclass, infraclass, subterclass, parvclass, megacohort, supercohort, cohort, subcohort, infracohort, superorder, order, suborder, infraorder, parvorder, superfamily, family, subfamily, supertribe, tribe, subtribe, genus, subgenus, section, subsection, species group,series, species subgroup, species, infraspecies, subspecies,forma specialis, variety,varietas, subvariety,race, stirp, form,forma,morph, subform, biotype,isolate,pathogroup,serogroup,serotype,strain,aberration, unspecified,no rank,unranked,clade&quot; 3.2.6 Xem danh sách các tên đồng danh của một loài với bộ dữ liệu EOL EOL - Encyclopedia of Life là bộ dữ liệu về sự sống trên toàn trái đất. Sử dụng lệnh eol_search() để lấy thông tin ID của loài cần kiểm tra trong bộ dữ liệu EOL. Sau đó sử dụng lệnh eol_pages() để lấy danh sách các tên loài đồng danh của loài. Ví dụ: Lấy danh sách tên đồng danh của Fejervarya limnocharis # Xác định ID taxonID &lt;- eol_search(sci=&#39;Fejervarya limnocharis&#39;) # lấy thông tin sp_syn &lt;- eol_pages(taxonconceptID = taxonID$pageid[1], synonyms = TRUE) Kết quả trả về là dạng list. Danh sách các danh pháp đồng danh được lưu vào bảng synonyms. Nhập sp_syn$synonyms để xem: 3.2.7 Xem danh sách tất cả các taxa con của một taxon Sử dụng lệnh downstream() với tham số downto = để xác định cấp phân loại gần lấy danh sách. Thay đổi tham số db = với bộ dữ liệu cần tra cứu: itis, gbif, ncbi, worms, hoặc bold Ví dụ lấy danh sách chi của họ Suidae res &lt;- downstream(&#39;Suidae&#39;, db=&quot;itis&quot;, downto=&quot;genus&quot;) ## ══ 1 queries ═══════════════ ## ✔ Found: Suidae ## ══ Results ═════════════════ ## ## • Total: 1 ## • Found: 1 ## • Not Found: 0 res$Suidae ## tsn parentname parenttsn rankname taxonname rankid ## 1 180721 Suini 898083 genus Sus 180 ## 2 624935 Babyrousini 898084 genus Babyrousa 180 ## 3 624936 Phacochoerini 898085 genus Phacochoerus 180 ## 4 624937 Potamochoerini 898086 genus Hylochoerus 180 ## 5 624938 Potamochoerini 898086 genus Potamochoerus 180 Ví dụ lấy danh sách các loài của họ Suidae res &lt;- downstream(&#39;Suidae&#39;, db=&quot;itis&quot;, downto=&quot;species&quot;) ## ══ 1 queries ═══════════════ ## ✔ Found: Suidae ## ══ Results ═════════════════ ## ## • Total: 1 ## • Found: 1 ## • Not Found: 0 res$Suidae ## tsn parentname parenttsn rankname taxonname rankid ## 1 180722 Sus 180721 species Sus scrofa 220 ## 2 625006 Babyrousa 624935 species Babyrousa babyrussa 220 ## 3 625007 Phacochoerus 624936 species Phacochoerus aethiopicus 220 ## 4 625008 Phacochoerus 624936 species Phacochoerus africanus 220 ## 5 625009 Hylochoerus 624937 species Hylochoerus meinertzhageni 220 ## 6 625010 Potamochoerus 624938 species Potamochoerus larvatus 220 ## 7 625011 Potamochoerus 624938 species Potamochoerus porcus 220 ## 8 625012 Sus 180721 species Sus barbatus 220 ## 9 625013 Sus 180721 species Sus bucculentus 220 ## 10 625014 Sus 180721 species Sus cebifrons 220 ## 11 625015 Sus 180721 species Sus celebensis 220 ## 12 625017 Sus 180721 species Sus philippensis 220 ## 13 625018 Sus 180721 species Sus salvanius 220 ## 14 898186 Babyrousa 624935 species Babyrousa bolabatuensis 220 ## 15 898187 Babyrousa 624935 species Babyrousa celebensis 220 ## 16 898188 Babyrousa 624935 species Babyrousa togeanensis 220 ## 17 898189 Sus 180721 species Sus ahoenobarbus 220 ## 18 898190 Sus 180721 species Sus oliveri 220 ## 19 898268 Sus 180721 species Sus verrucosus 220 Ví dụ lấy danh sách loài của chi Billolivia từ dữ liệu GBIF downstream(&#39;Billolivia&#39;, db=&quot;gbif&quot;, downto=&quot;species&quot;) ## ══ 1 queries ═══════════════ ## ✔ Found: Billolivia ## ══ Results ═════════════════ ## ## • Total: 1 ## • Found: 1 ## • Not Found: 0 ## $Billolivia ## name rank key name_type ## 1 Billolivia cadamensis species 10887487 canonicalname ## 2 Billolivia citrina species 10886269 canonicalname ## 3 Billolivia kyi species 10710697 canonicalname ## 4 Billolivia lamdongensis species 11165881 canonicalname ## 5 Billolivia longipetiolata species 9194430 canonicalname ## 6 Billolivia middletonii species 10846121 canonicalname ## 7 Billolivia minutiflora species 8964907 canonicalname ## 8 Billolivia moelleri species 10737555 canonicalname ## 9 Billolivia noanii species 10884758 canonicalname ## 10 Billolivia poilanei species 8841424 canonicalname ## 11 Billolivia thongii species 10711917 canonicalname ## 12 Billolivia tichii species 10819236 canonicalname ## 13 Billolivia truciae species 10739074 canonicalname ## 14 Billolivia vietnamensis species 9206741 canonicalname ## 15 Billolivia violacea species 8744926 canonicalname ## 16 Billolivia yenhoae species 10736400 canonicalname ## ## attr(,&quot;class&quot;) ## [1] &quot;downstream&quot; ## attr(,&quot;db&quot;) ## [1] &quot;gbif&quot; Chúng ta có thể nhập các cấp phân loại sau vào tham số downto = : 'superkingdom', 'kingdom', 'subkingdom','infrakingdom','phylum','division','subphylum', 'subdivision','infradivision', 'superclass','class','subclass','infraclass', 'superorder','order','suborder','infraorder','superfamily','family', 'subfamily','tribe','subtribe','genus','subgenus','section','subsection', 'species group','species','subspecies','variety','form','subvariety','race', 'stirp', 'morph','aberration','subform', 'unspecified', 'no rank' "],["bandocoban.html", "Phần 4 Thao tác cơ bản với tập tin bản đồ 4.1 Tập tin vector 4.2 Tập tin dạng raster 4.3 Biên tập bản đồ với gói lệnh ggplot và ggspatial", " Phần 4 Thao tác cơ bản với tập tin bản đồ 4.1 Tập tin vector Để xử lý các tập tin bản đồ, chúng ta sử dụng gói lệnh sf. library(sf) Tải tập tin bản đồ về địa phận tỉnh thành của Việt Nam được cung cấp từ https://data.opendevelopmentmekong.net/vi/dataset/a-phn-tnh. Dùng lệnh st_read để đọc tập tin geojson vừa tải về. Lệnh này cũng có thể đọc tập tin *.shp. sau đó xem nhanh bản đồ với lệnh plot vietnam &lt;- st_read(&quot;DATA/Vietnamdiaphantinh.geojson&quot;) ## Reading layer `Vietnamdiaphantinh&#39; from data source ## `/Users/bachnguyen/Library/CloudStorage/OneDrive-Personal/WORKING/ECOR/DATA/Vietnamdiaphantinh.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 63 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 102.1421 ymin: 6.953306 xmax: 116.9473 ymax: 23.3939 ## Geodetic CRS: WGS 84 plot(vietnam$geometry) Chúng ta có thể trích lọc thông tin bản đồ dựa vào bảng dữ liệu của bản đồ. colnames(vietnam) ## [1] &quot;gid&quot; &quot;code&quot; &quot;ten_tinh&quot; &quot;geometry&quot; Ví dụ lọc bản đồ Thành phố Đà Nẵng DaNang &lt;- vietnam |&gt; filter(ten_tinh == &quot;Đà Nẵng&quot;) plot(DaNang$geometry) giới hạn phần đất liền plot(DaNang$geometry, xlim=c(107.8,108.4), ylim=c(15.9,16.3)) Lưu thành file .shp hoặc .geojson với lệnh st_write st_write(DaNang, &quot;DATA/DaNang.geojson&quot;, append = TRUE) ## Updating layer `DaNang&#39; to data source `DATA/DaNang.geojson&#39; using driver `GeoJSON&#39; ## Updating existing layer DaNang ## Writing 1 features with 3 fields and geometry type Multi Polygon. 4.2 Tập tin dạng raster Đối với dạng raster chúng ta sử dụng gói lệnh terra để đọc vào R library(terra) Mở tập tin bản đồ địa hình Việt Nam. Các bạn có thể tải tập tin DEM từ địa chỉ sau: http://marcchoisy.free.fr/srtm90.tif. Đây là bản đồ về cao độ của Việt Nam phần đất liền. VNDEM &lt;- rast(&quot;DATA/VNsrtm90.tif&quot;) plot(VNDEM) Cắt raster DEM_VN theo ranh giới Đà Nẵng với 2 lệnh crop và mask DaNang_dem &lt;- crop(VNDEM, DaNang) |&gt; mask(DaNang) plot(DaNang_dem,xlim=c(107.8,108.4), ylim=c(15.9,16.3)) Lưu raster thành tập tin với lệnh writeRaster của gói terra writeRaster(DaNang_dem,&quot;DATA/DaNangDem.tif&quot;, overwrite=TRUE) 4.3 Biên tập bản đồ với gói lệnh ggplot và ggspatial map1 &lt;- ggplot(vietnam) + geom_sf(color=&quot;grey&quot;, fill = &quot;blue&quot;, alpha = 0.7, linewidth=0.05) + theme_bw() map1 Thêm ký hiệu hướng bắc với hàm annotation_north_arrow của gói ggspatial. Chúng ta có thể chọn vị trí đặt ký hiệu bằng cách thay đổi location với các giá trị như “tl” cho “topleft”, “tr” cho “topright”, “br” cho “bottomright” và “bl” cho “bottomleft”. library(ggspatial) map1 + annotation_north_arrow(location = &quot;tr&quot;, height=unit(1, &quot;cm&quot;),width=unit(0.75, &quot;cm&quot;)) Chúng ta có thể thêm thước tỷ lệ với hàm annotation_scale() map1 + annotation_north_arrow(location = &quot;tr&quot;, height=unit(1, &quot;cm&quot;), width=unit(0.75, &quot;cm&quot;)) + annotation_scale(location = &quot;bl&quot;, width_hint = 0.5) Để vẽ lớp raster trong ggplot, chúng ta cần sử dụng lệnh geom_spatraster trong gói tidyterra library(tidyterra) ggplot()+ geom_spatraster(data=VNDEM)+ scale_fill_viridis_c(name = &quot;Altitude&quot;, option = &quot;viridis&quot;, alpha = 1, na.value = NA) + geom_sf(data=vietnam,color=&quot;grey&quot;, fill=NA, linewidth=0.02 )+ theme_bw() Một tí màu mè library(rnaturalearth) #world_map world &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) mycol &lt;- &quot;#fd8f24&quot; #plot ggplot(world) + geom_sf(fill = NA, color = mycol) + geom_spatraster(data=VNDEM) + scale_fill_viridis_c(name = &quot;Altitude&quot;, option = &quot;viridis&quot;, alpha = 1, na.value = NA) + geom_sf(data = vietnam, fill = NA, linewidth=0.05) + coord_sf(xlim = c(100,118), ylim = c(8,24)) + scale_x_continuous(breaks = seq(100,114,4)) + annotation_north_arrow(location = &#39;tr&#39;, height = unit(1,&quot;cm&quot;), width = unit(0.75, &quot;cm&quot;), style = north_arrow_fancy_orienteering) + annotation_scale(location = &quot;bl&quot;, width_hint = 0.2, height = unit(0.1,&quot;cm&quot;), bar_cols = c(mycol, &quot;white&quot;), text_cex = 0.7, line_col = mycol, text_col = mycol, pad_x = unit(1, &quot;cm&quot;), pad_y = unit(0.2, &quot;cm&quot;)) + theme_bw() + theme(panel.grid.major = element_line(size = 0.1, linetype = &#39;solid&#39;)) + labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = &quot;Việt Nam&quot;) Đổi đơn vị sang UTM zone 49 mã “32649” với thông số datum trong lệnh coord_sf ggplot() + geom_sf(data = DaNang, fill = &quot;grey&quot;) + coord_sf(xlim = c(107.8,108.4), ylim = c(15.9,16.3), expand = FALSE, datum = 32649) + theme_bw() "],["tạo-sơ-đồ-độ-giàu-loài-ở-khu-vực-khảo-sát.html", "Phần 5 Tạo sơ đồ độ giàu loài ở khu vực khảo sát 5.1 Tạo sơ đồ vị trí ghi nhận từ dữ liệu Sơn Trà 5.2 Tạo sơ đồ độ giàu loài", " Phần 5 Tạo sơ đồ độ giàu loài ở khu vực khảo sát 5.1 Tạo sơ đồ vị trí ghi nhận từ dữ liệu Sơn Trà library(tidyverse) library(sf) library(ggspatial) Chuẩn bị lớp ranh giới khu vực Sơn Trà. Dùng lệnh st_crop để cắt khu vực Sơn Trà từ dữ liệu Việt Nam. vietnam &lt;- st_read(&quot;DATA/Vietnamdiaphantinh.geojson&quot;) ## Reading layer `Vietnamdiaphantinh&#39; from data source ## `/Users/bachnguyen/Library/CloudStorage/OneDrive-Personal/WORKING/ECOR/DATA/Vietnamdiaphantinh.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 63 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 102.1421 ymin: 6.953306 xmax: 116.9473 ymax: 23.3939 ## Geodetic CRS: WGS 84 sontra_poly &lt;- st_crop(vietnam, xmin = 108.2, xmax = 108.35, ymin = 16.09, ymax = 16.17) Đọc bộ dữ liệu ghi nhận loài tại Sơn Trà đã giới thiệu ở phần 1.1. Sau đó dùng lệnh st_as_sf để chuyển sang dạng tập tin bản đồ dựa vào 2 cột “decimalLongitude” và “decimalLatitude”. Vì đây là dữ liệu dạng WGS84 lonlat nên chúng ta chọn mã crs=4326. sontra &lt;- read_csv(&quot;DATA/occurrence_SonTra_Peninsula.csv&quot;) #chuyen sang dạng tập tin bản đồ sontra_sf &lt;- sontra |&gt; st_as_sf(coords = c(&quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;), crs = 4326) Vẽ sơ đồ thể hiện vị trí ghi nhận ggplot() + geom_sf(data = sontra_poly, fill = NA, color=&quot;pink&quot;) + geom_sf(data = sontra_sf, aes(color = class), size = 0.5) + annotation_north_arrow(location = &quot;tr&quot;, height=unit(1, &quot;cm&quot;), width=unit(0.75, &quot;cm&quot;)) + annotation_scale(location = &quot;br&quot;, width_hint = 0.2) + theme(panel.grid.major = element_line(size = 0.1, linetype = &#39;solid&#39;)) + theme_classic() + labs(title=&quot;Sơ đồ vị trí ghi nhận&quot;, x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) 5.2 Tạo sơ đồ độ giàu loài Để tạo sơ đồ độ giàu loài, chúng ta sẽ tạo các lưới với kích thước nào đó. Sau đó sẽ đếm số lượng loài xuất hiện trong mỗi ô. Dùng số lượng này để thể hiện lên sơ đồ 5.2.1 Tạo lưới có kích thước 1km với lệnh st_make_grid. CRGrid &lt;- sontra_poly |&gt; st_make_grid(cellsize = 0.008) |&gt; st_intersection(sontra_poly) |&gt; st_cast(&quot;MULTIPOLYGON&quot;) |&gt; st_sf() |&gt; mutate(cellid = row_number()) ggplot() + geom_sf(data = sontra_poly, fill = NA, color=&quot;pink&quot;) + geom_sf(data = CRGrid, fill = NA, color=&quot;black&quot;)+ theme_classic() 5.2.2 Đếm số lượng loài ghi nhận trong từng ô lưới. # cell richness richness_grid &lt;- CRGrid |&gt; st_join(sontra_sf) |&gt; distinct_at(c(&quot;cellid&quot;, &quot;scientificName&quot;), .keep_all = T) |&gt; mutate(overlap = ifelse(!is.na(occurrenceID), 1, 0)) |&gt; group_by(cellid) |&gt; summarize(num_species = sum(overlap)) ggplot() + geom_sf(data = sontra_poly, fill = NA, color=&quot;pink&quot;) + geom_sf(data = CRGrid, fill = NA, color=&quot;black&quot;)+ geom_sf_text(data = richness_grid, aes(label = num_species), color = &quot;black&quot;) + theme_classic() 5.2.3 Trình bày sơ đồ hoàn chỉnh ggplot() + geom_sf(data = sontra_poly, fill = NA, color=&quot;pink&quot;) + geom_sf(data = CRGrid, fill = NA, color=&quot;white&quot;)+ geom_sf(data = richness_grid, aes(fill = num_species), color = NA) + scale_fill_viridis_c(name = &quot;Altitude&quot;, option = &quot;plasma&quot;, alpha = 1, na.value = NA) + geom_sf_text(data = richness_grid, aes(label = num_species), color = &quot;white&quot;) + geom_sf(data = sontra_sf, aes(color = class), size = 0.5) + annotation_north_arrow(location = &quot;tr&quot;, height=unit(1, &quot;cm&quot;), width=unit(0.75, &quot;cm&quot;)) + annotation_scale(location = &quot;br&quot;, width_hint = 0.2) + theme(panel.grid.major = element_line(size = 0.1, linetype = &#39;solid&#39;)) + theme_classic() + labs(title=&quot;Sơ đồ độ giàu loài tại Bán đảo Sơn Trà&quot;, caption = &quot;Data: Trần Văn Bằng et. al. &quot;, x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) "],["tải-ghi-nhận-loài-từ-dữ-liệu-gbif.html", "Phần 6 Tải ghi nhận loài từ dữ liệu GBIF 6.1 Tải ghi nhận 6.2 Tạo sơ đồ vị trí ghi nhận 6.3 Xuất dữ liệu sang Excel", " Phần 6 Tải ghi nhận loài từ dữ liệu GBIF 6.1 Tải ghi nhận Sử dụng lệnh occ_data từ gói lệnh rgbif. Thêm tham số hasCoordinate = TRUE để lấy về các ghi nhận có thông tin về toạ độ phân bố. library(rgbif) Ví dụ tải các ghi nhận về cây Gõ đỏ (Afzelia xylocarpa) mysp &lt;- &#39;Afzelia xylocarpa&#39; gbif_godo &lt;- occ_data(scientificName = mysp, hasCoordinate = TRUE) Dữ liệu trả về là dạng list, trong đó bảng data chứa rất nhiều trường thông tin, chúng ta có thể lọc ra một số thông tin cơ bản như sau: gbif_godo2 &lt;- gbif_godo$data |&gt; select(recordedBy, recordNumber, country,decimalLatitude, decimalLongitude) Xem số lượng ghi nhận theo quốc gia soluong &lt;- gbif_godo$data |&gt; count(country) soluong ## # A tibble: 6 × 2 ## country n ## &lt;chr&gt; &lt;int&gt; ## 1 Cambodia 8 ## 2 China 44 ## 3 Lao People’s Democratic Republic 11 ## 4 Slovenia 4 ## 5 Thailand 84 ## 6 Viet Nam 18 Vẽ nhanh biểu đồ ggplot(soluong, aes(x= reorder(country,n), y = n)) + geom_col() + geom_text(aes(label = n), position = position_stack(vjust=0.5), color = &quot;white&quot;) + theme_bw() + coord_flip()+ labs(title = &quot;Số lượng ghi nhận theo quốc gia&quot;, caption = &quot;Data: GBIF&quot;, x = &quot;&quot; , y = &quot;Số lượng ghi nhận&quot;) 6.2 Tạo sơ đồ vị trí ghi nhận Xem nhanh sơ đồ các điểm ghi nhận. plot(gbif_godo2$decimalLongitude, gbif_godo2$decimalLatitude) Trong dữ liệu tải về, một số điểm có toạ dộ (0,0). Nên chúng ta cần bỏ các điểm này ra trước khi vẽ lại sơ đồ. gbif_godo3 &lt;- gbif_godo2 |&gt; filter(decimalLongitude &gt; 0, decimalLatitude &gt;0) plot(gbif_godo3$decimalLongitude, gbif_godo3$decimalLatitude) Xem nhanh sơ đồ có ranh giới các quốc gia với gói lệnh maps. library(maps) map(&quot;world&quot;) points(gbif_godo3[ , c(&quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;)], pch = 16, col=&quot;red&quot;) Phóng lớn sơ đồ đến khu vực phân bố loài map(&quot;world&quot;, xlim = c(95,115), ylim = c(8,25), resolution = 0) points(gbif_godo3[ , c(&quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;)], pch = 16, col=&quot;red&quot;) Tạo sơ đồ hoàn chỉnh Các bạn có thể xem lại các thao tác cơ bản với tập tin bản đồ tại phần 4. library(sf) library(ggspatial) library(rnaturalearth) library(ggtext) world &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) vietnam &lt;- st_read(&quot;DATA/Vietnamdiaphantinh.geojson&quot;) ## Reading layer `Vietnamdiaphantinh&#39; from data source ## `/Users/bachnguyen/Library/CloudStorage/OneDrive-Personal/WORKING/ECOR/DATA/Vietnamdiaphantinh.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 63 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 102.1421 ymin: 6.953306 xmax: 116.9473 ymax: 23.3939 ## Geodetic CRS: WGS 84 gbif_godo_sf &lt;- gbif_godo3 |&gt; st_as_sf(coords = c(&quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;), crs = 4326) ggplot() + geom_sf(data = world, fill = NA, color = &quot;black&quot;) + geom_sf(data = vietnam, fill = &quot;grey&quot;, color=&quot;orange&quot;, linewidth = 0.05) + geom_sf(data = gbif_godo_sf, fill = NA, color=&quot;red&quot;) + geom_sf_text(data = world, aes(label = name)) + annotation_north_arrow(location = &quot;tr&quot;, height=unit(1, &quot;cm&quot;), width=unit(0.75, &quot;cm&quot;)) + annotation_scale(location = &quot;br&quot;, width_hint = 0.2) + theme(panel.grid.major = element_line(size = 0.1, linetype = &#39;solid&#39;)) + theme_bw() + labs(title=&quot;Sơ đồ vị trí ghi nhận loài *Afzelia xylocarpa*&quot;, caption = &quot;Data: GBIF&quot;, x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) + theme(title = element_markdown()) + coord_sf(xlim = c(95,118), ylim = c(8,24)) 6.3 Xuất dữ liệu sang Excel Chúng ta dùng lệnh write.xlsx() trong gói openxlsx để lưu dữ liệu sang tập tin *.xlsx của phần mềm Excel. library(openxlsx) write.xlsx(gbif_godo$data, &quot;gbif_godo.xlsx&quot;) "],["dự-đoán-vùng-phân-bố-loài.html", "Phần 7 Dự đoán vùng phân bố loài 7.1 Lấy dữ liệu ghi nhận loài Gõ đỏ (Afzelia xylocarpa) từ GBIF 7.2 Xem sơ đồ phân bố các ghi nhận 7.3 Chạy mô phỏng Maxent", " Phần 7 Dự đoán vùng phân bố loài Gọi các gói lệnh library(rgbif) library(sf) library(ggspatial) library(ggtext) library(terra) library(tidyterra) 7.1 Lấy dữ liệu ghi nhận loài Gõ đỏ (Afzelia xylocarpa) từ GBIF mysp &lt;- &#39;Afzelia xylocarpa&#39; gbif_godo &lt;- occ_data(scientificName = mysp, hasCoordinate = TRUE) Lọc ra các điểm được ghi nhận tại Việt Nam godoVN &lt;- gbif_godo$data |&gt; dplyr::select(recordedBy, recordNumber, country,decimalLatitude, decimalLongitude) |&gt; filter(decimalLongitude &gt; 0, decimalLatitude &gt;0, country == &quot;Viet Nam&quot;) 7.2 Xem sơ đồ phân bố các ghi nhận vietnam &lt;- st_read(&quot;DATA/Vietnamdiaphantinh.geojson&quot;) ## Reading layer `Vietnamdiaphantinh&#39; from data source ## `/Users/bachnguyen/Library/CloudStorage/OneDrive-Personal/WORKING/ECOR/DATA/Vietnamdiaphantinh.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 63 features and 3 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 102.1421 ymin: 6.953306 xmax: 116.9473 ymax: 23.3939 ## Geodetic CRS: WGS 84 godoVN_sf &lt;- godoVN |&gt; st_as_sf(coords = c(&quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;), crs = 4326) ggplot() + geom_sf(data = vietnam, fill = &quot;grey&quot;, color=&quot;orange&quot;, linewidth = 0.05) + geom_sf(data = godoVN_sf, fill = NA, color=&quot;red&quot;) + theme_bw() 7.3 Chạy mô phỏng Maxent Sử dụng dữ liệu môi trường gồm 19 biến khí hậu và 1 biến cao độ được cung cấp từ trang web https://www.worldclim.org/. Bộ dữ liệu này đã được cắt theo ranh Việt Nam phần đất liền. Chúng ta sẽ gọi các biến khí hậu này vào R với lệnh stack từ gói raster. # load toàn bộ biến khí hậu wcpath = &quot;DATA/VNBioWC/&quot; VNvariablelist = paste0(wcpath,list.files(wcpath)) #xem danh sách các biến VNvariablelist ## [1] &quot;DATA/VNBioWC/01.tif&quot; &quot;DATA/VNBioWC/02.tif&quot; &quot;DATA/VNBioWC/03.tif&quot; ## [4] &quot;DATA/VNBioWC/04.tif&quot; &quot;DATA/VNBioWC/05.tif&quot; &quot;DATA/VNBioWC/06.tif&quot; ## [7] &quot;DATA/VNBioWC/07.tif&quot; &quot;DATA/VNBioWC/08.tif&quot; &quot;DATA/VNBioWC/09.tif&quot; ## [10] &quot;DATA/VNBioWC/10.tif&quot; &quot;DATA/VNBioWC/11.tif&quot; &quot;DATA/VNBioWC/12.tif&quot; ## [13] &quot;DATA/VNBioWC/13.tif&quot; &quot;DATA/VNBioWC/14.tif&quot; &quot;DATA/VNBioWC/15.tif&quot; ## [16] &quot;DATA/VNBioWC/16.tif&quot; &quot;DATA/VNBioWC/17.tif&quot; &quot;DATA/VNBioWC/18.tif&quot; ## [19] &quot;DATA/VNBioWC/19.tif&quot; &quot;DATA/VNBioWC/20.tif&quot; # đọc các biến vào R currentEnv &lt;- raster::stack(VNvariablelist) Ví dụ hiển thị biến Bio01 plot(currentEnv[[1]]) Gọi gói lệnh dismo để chạy mô phỏng MaxEnt library(rJava) library(dismo) Tạo các điểm ngẫu nhiên set.seed(134) bg1 &lt;- randomPoints(currentEnv[[1]], n=1000) Khai báo thư mục lưu trữ các tập tin sẽ được tạo ra khi chạy mô phỏng. outpath &lt;- &quot;DATA/OUT/Maxent/&quot; Dữ liệu ghi nhận cần được sang định dạng spatial godoVN_spatial &lt;- godoVN_sf |&gt; as(&quot;Spatial&quot;) Chạy mô phỏng với lệnh maxent() trong gói dismo #B2 chay model modelBasic &lt;- maxent( x=currentEnv, # climate variable p=godoVN_spatial, # species point a=bg1, #point background path=outpath, # folder to output result removeDuplicates=TRUE, # remove duplicate points # Additional argument that can be passed to MaxEnt args=c( &#39;linear=true&#39;, &#39;quadratic=true&#39;, &#39;product=true&#39;, &#39;threshold=true&#39;, &#39;hinge=false&#39;, &#39;responsecurves=true&#39;, &#39;jackknife=true&#39;, &#39;askoverwrite=false&#39;, &#39;removeduplicates=true&#39;, &#39;writeplotdata=true&#39; ) ) Đánh giá mô hình #### evaluate e1 &lt;- evaluate(modelBasic, p=godoVN_spatial, a=bg1, x=currentEnv) plot(e1, &#39;ROC&#39;) Sau khi có mô hình, chúng ta sử dụng lệnh predict để tạo lớp bản đồ raster thể hiện vùng phân bố dự đoán cho loài. fname=&quot;predict_map.tif&quot; mapPredict &lt;- predict( object=modelBasic, x=currentEnv, filename=paste0(outpath,fname), na.rm=TRUE, format=&#39;GTiff&#39;, overwrite=TRUE, progress=&#39;text&#39; ) ## | | | 0% | |================== | 25% | |=================================== | 50% | |==================================================== | 75% | |======================================================================| 100% ## Vẽ sơ đồ với ggplot() Vùng phân bố tiềm năng của loài với giá trị dự đoán MaxEnt chạy từ 0 đến 1. Khu vực có giá trị càng gần 1 là những khu vực có điều kiện khí hậu, địa hình phù hợp cho sự phân bố của loài. Và ngược lại khu vực có giá trị càng gần 0 là những khu vực khó khăn. mapPredict_SR &lt;- rast(mapPredict) ggplot() + geom_sf(data = vietnam, fill = &quot;grey&quot;, color=&quot;orange&quot;, linewidth = 0.05) + geom_spatraster(data=mapPredict_SR) + scale_fill_viridis_c(name = &quot;MaxEnt value&quot;, option = &quot;viridis&quot;, alpha = 1, na.value = NA) + geom_sf(data = godoVN_sf, fill = NA, color=&quot;red&quot;) + theme_bw()+ labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;, title = names(raster)) "],["tính-chỉ-số-đa-dạng-sinh-học-và-loài-quan-trọng-trong-ô-định-vị.html", "Phần 8 Tính chỉ số đa dạng sinh học và loài quan trọng trong ô định vị 8.1 Tạo dữ liệu giả lập 8.2 Phân tích 8.3 Chỉ số đa dạng sinh học", " Phần 8 Tính chỉ số đa dạng sinh học và loài quan trọng trong ô định vị 8.1 Tạo dữ liệu giả lập Tạo bảng dữ liệu giả lập kết quả khảo sát ô định vị với các cột dữ liệu gồm: TreeID, dbh_cm và species set.seed(134) plotdata &lt;- tibble(TreeID = paste0(&quot;Tree&quot;,1:500), dbh_cm = floor(runif(500, min=1, max=100)), species = paste0(&quot;sp&quot;,floor(runif(500, min=1, max=30)))) plotdata ## # A tibble: 500 × 3 ## TreeID dbh_cm species ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Tree1 20 sp24 ## 2 Tree2 63 sp6 ## 3 Tree3 88 sp4 ## 4 Tree4 25 sp14 ## 5 Tree5 61 sp21 ## 6 Tree6 17 sp5 ## 7 Tree7 36 sp10 ## 8 Tree8 78 sp6 ## 9 Tree9 10 sp4 ## 10 Tree10 82 sp19 ## # ℹ 490 more rows 8.2 Phân tích Đếm số lượng cá thể và tổng tiết diện ngang cho từng loài spdata &lt;- plotdata |&gt; mutate(G = ((dbh_cm/2)/100)^2*pi) |&gt; # unit: m2) |&gt; group_by(species) |&gt; summarise(individu=n(),BA=sum(G)) spdata |&gt; mutate_if(is.numeric,round,1) |&gt; b_show_df( output) 8.3 Chỉ số đa dạng sinh học Tính toán các chỉ số Shannon, Simpson, Evenness với gói lệnh vegan library(vegan) Tính tổng số loài (S &lt;- specnumber(spdata$individu)) ## [1] 29 Tính chỉ số Shannon (H &lt;- diversity(spdata$individu, index=&quot;shannon&quot;)) ## [1] 3.332301 Tính chỉ số Gini–Simpson (D &lt;- diversity(spdata$individu, index=&quot;simpson&quot;)) ## [1] 0.96312 Tính chỉ số cân bằng Evenness (E &lt;- H/log(S)) ## [1] 0.9896076 Tính chỉ số Margalef với lệnh margalef() từ gói abdiv library(abdiv) margalef(spdata$individu) ## [1] 4.505513 8.3.1 Tính chỉ số IVI Vì dữ liệu khảo sát trong 1 ô định vị nên chỉ số IVI được tính dựa trên 2 tham số là độ Ưu thế và Mật độ. Kết quả cho thấy loài sp12 và s10 giữ vị trí quan trọng trong ô định vị nghiên cứu IVI &lt;- spdata |&gt; mutate(MD = individu/sum(individu)*100, UT = BA/sum(BA)*100, IVI = UT + MD, rank = rank(-IVI)) |&gt; arrange(rank) IVI |&gt; mutate_if(is.numeric,round,1) |&gt; b_show_df( output) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
